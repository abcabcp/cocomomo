/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * COCOMOMO API
 * COCOMOMO Î∞±ÏóîÎìú API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  ApiErrorResponseDto,
  Post,
  PostsControllerCreatePostBody,
  PostsControllerFindAllParams,
  PostsControllerUploadContentImage201,
  PostsResponseDto,
  UpdatePostDto,
} from '../model';

import { apiInstance } from '../api';

/**
 * Í≤åÏãúÍ∏Ä Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§. Í≤ÄÏÉâ, ÌïÑÌÑ∞ÎßÅ, ÌéòÏù¥Ïßï Í∏∞Îä•ÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.
 * @summary Í≤åÏãúÍ∏Ä Î™©Î°ù Ï°∞Ìöå
 */
export const postsControllerFindAll = (
  params?: PostsControllerFindAllParams,
  signal?: AbortSignal,
) => {
  return apiInstance<PostsResponseDto>({
    url: `/posts`,
    method: 'GET',
    params,
    signal,
  });
};

export const getPostsControllerFindAllQueryKey = (
  params?: PostsControllerFindAllParams,
) => {
  return [`/posts`, ...(params ? [params] : [])] as const;
};

export const getPostsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof postsControllerFindAll>>,
  TError = ApiErrorResponseDto,
>(
  params?: PostsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postsControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPostsControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof postsControllerFindAll>>
  > = ({ signal }) => postsControllerFindAll(params, signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof postsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof postsControllerFindAll>>
>;
export type PostsControllerFindAllQueryError = ApiErrorResponseDto;

export function usePostsControllerFindAll<
  TData = Awaited<ReturnType<typeof postsControllerFindAll>>,
  TError = ApiErrorResponseDto,
>(
  params: undefined | PostsControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postsControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof postsControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof postsControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePostsControllerFindAll<
  TData = Awaited<ReturnType<typeof postsControllerFindAll>>,
  TError = ApiErrorResponseDto,
>(
  params?: PostsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postsControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof postsControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof postsControllerFindAll>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePostsControllerFindAll<
  TData = Awaited<ReturnType<typeof postsControllerFindAll>>,
  TError = ApiErrorResponseDto,
>(
  params?: PostsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postsControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Í≤åÏãúÍ∏Ä Î™©Î°ù Ï°∞Ìöå
 */

export function usePostsControllerFindAll<
  TData = Awaited<ReturnType<typeof postsControllerFindAll>>,
  TError = ApiErrorResponseDto,
>(
  params?: PostsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postsControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPostsControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÏÉàÎ°úÏö¥ Í≤åÏãúÍ∏ÄÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§. Ïç∏ÎÑ§Ïùº Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Í∞ÄÎä•.
 * @summary Í≤åÏãúÍ∏Ä ÏÉùÏÑ±
 */
export const postsControllerCreatePost = (
  postsControllerCreatePostBody: PostsControllerCreatePostBody,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  formData.append(`title`, postsControllerCreatePostBody.title);
  formData.append(`content`, postsControllerCreatePostBody.content);
  if (postsControllerCreatePostBody.tags !== undefined) {
    postsControllerCreatePostBody.tags.forEach((value) =>
      formData.append(`tags`, value),
    );
  }
  if (postsControllerCreatePostBody.thumbnail !== undefined) {
    formData.append(`thumbnail`, postsControllerCreatePostBody.thumbnail);
  }

  return apiInstance<Post>({
    url: `/posts`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    signal,
  });
};

export const getPostsControllerCreatePostMutationOptions = <
  TError = ApiErrorResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsControllerCreatePost>>,
    TError,
    { data: PostsControllerCreatePostBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postsControllerCreatePost>>,
  TError,
  { data: PostsControllerCreatePostBody },
  TContext
> => {
  const mutationKey = ['postsControllerCreatePost'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postsControllerCreatePost>>,
    { data: PostsControllerCreatePostBody }
  > = (props) => {
    const { data } = props ?? {};

    return postsControllerCreatePost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostsControllerCreatePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof postsControllerCreatePost>>
>;
export type PostsControllerCreatePostMutationBody =
  PostsControllerCreatePostBody;
export type PostsControllerCreatePostMutationError = ApiErrorResponseDto;

/**
 * @summary Í≤åÏãúÍ∏Ä ÏÉùÏÑ±
 */
export const usePostsControllerCreatePost = <
  TError = ApiErrorResponseDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postsControllerCreatePost>>,
      TError,
      { data: PostsControllerCreatePostBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postsControllerCreatePost>>,
  TError,
  { data: PostsControllerCreatePostBody },
  TContext
> => {
  const mutationOptions = getPostsControllerCreatePostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * IDÎ°ú ÌäπÏ†ï Í≤åÏãúÍ∏ÄÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Í≤åÏãúÍ∏Ä Ï°∞Ìöå
 */
export const postsControllerFindOne = (id: number, signal?: AbortSignal) => {
  return apiInstance<Post>({ url: `/posts/${id}`, method: 'GET', signal });
};

export const getPostsControllerFindOneQueryKey = (id: number) => {
  return [`/posts/${id}`] as const;
};

export const getPostsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof postsControllerFindOne>>,
  TError = ApiErrorResponseDto,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postsControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPostsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof postsControllerFindOne>>
  > = ({ signal }) => postsControllerFindOne(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof postsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof postsControllerFindOne>>
>;
export type PostsControllerFindOneQueryError = ApiErrorResponseDto;

export function usePostsControllerFindOne<
  TData = Awaited<ReturnType<typeof postsControllerFindOne>>,
  TError = ApiErrorResponseDto,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof postsControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof postsControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePostsControllerFindOne<
  TData = Awaited<ReturnType<typeof postsControllerFindOne>>,
  TError = ApiErrorResponseDto,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof postsControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof postsControllerFindOne>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePostsControllerFindOne<
  TData = Awaited<ReturnType<typeof postsControllerFindOne>>,
  TError = ApiErrorResponseDto,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postsControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Í≤åÏãúÍ∏Ä Ï°∞Ìöå
 */

export function usePostsControllerFindOne<
  TData = Awaited<ReturnType<typeof postsControllerFindOne>>,
  TError = ApiErrorResponseDto,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postsControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPostsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Í∏∞Ï°¥ Í≤åÏãúÍ∏ÄÏùÑ ÏàòÏ†ïÌï©ÎãàÎã§. Ïç∏ÎÑ§Ïùº Ïù¥ÎØ∏ÏßÄÎèÑ Î≥ÄÍ≤Ω Í∞ÄÎä•Ìï©ÎãàÎã§.
 * @summary Í≤åÏãúÍ∏Ä ÏàòÏ†ï
 */
export const postsControllerUpdatePost = (
  id: number,
  updatePostDto: UpdatePostDto,
) => {
  const formData = new FormData();
  if (updatePostDto.title !== undefined) {
    formData.append(`title`, updatePostDto.title);
  }
  if (updatePostDto.content !== undefined) {
    formData.append(`content`, updatePostDto.content);
  }
  if (updatePostDto.tags !== undefined) {
    updatePostDto.tags.forEach((value) => formData.append(`tags`, value));
  }
  if (updatePostDto.thumbnailUrl !== undefined) {
    formData.append(`thumbnailUrl`, updatePostDto.thumbnailUrl);
  }

  return apiInstance<Post>({
    url: `/posts/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
  });
};

export const getPostsControllerUpdatePostMutationOptions = <
  TError = ApiErrorResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsControllerUpdatePost>>,
    TError,
    { id: number; data: UpdatePostDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postsControllerUpdatePost>>,
  TError,
  { id: number; data: UpdatePostDto },
  TContext
> => {
  const mutationKey = ['postsControllerUpdatePost'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postsControllerUpdatePost>>,
    { id: number; data: UpdatePostDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return postsControllerUpdatePost(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostsControllerUpdatePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof postsControllerUpdatePost>>
>;
export type PostsControllerUpdatePostMutationBody = UpdatePostDto;
export type PostsControllerUpdatePostMutationError = ApiErrorResponseDto;

/**
 * @summary Í≤åÏãúÍ∏Ä ÏàòÏ†ï
 */
export const usePostsControllerUpdatePost = <
  TError = ApiErrorResponseDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postsControllerUpdatePost>>,
      TError,
      { id: number; data: UpdatePostDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postsControllerUpdatePost>>,
  TError,
  { id: number; data: UpdatePostDto },
  TContext
> => {
  const mutationOptions = getPostsControllerUpdatePostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Í≤åÏãúÍ∏ÄÍ≥º Ïó∞Í¥ÄÎêú Ïù¥ÎØ∏ÏßÄÎ•º ÏÇ≠Ï†úÌï©ÎãàÎã§.
 * @summary Í≤åÏãúÍ∏Ä ÏÇ≠Ï†ú
 */
export const postsControllerDeletePost = (id: number) => {
  return apiInstance<void>({ url: `/posts/${id}`, method: 'DELETE' });
};

export const getPostsControllerDeletePostMutationOptions = <
  TError = ApiErrorResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsControllerDeletePost>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postsControllerDeletePost>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['postsControllerDeletePost'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postsControllerDeletePost>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postsControllerDeletePost(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostsControllerDeletePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof postsControllerDeletePost>>
>;

export type PostsControllerDeletePostMutationError = ApiErrorResponseDto;

/**
 * @summary Í≤åÏãúÍ∏Ä ÏÇ≠Ï†ú
 */
export const usePostsControllerDeletePost = <
  TError = ApiErrorResponseDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postsControllerDeletePost>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postsControllerDeletePost>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getPostsControllerDeletePostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Í≤åÏãúÍ∏Ä ÏóêÎîîÌÑ∞ÏóêÏÑú ÏÇ¨Ïö©Ìï† Ïù¥ÎØ∏ÏßÄÎ•º ÏóÖÎ°úÎìúÌï©ÎãàÎã§. ÌóàÏö©Îêú Ïù¥ÎØ∏ÏßÄ ÌÉÄÏûÖ: jpg, png, webp, gif, jpeg
 * @summary ÏóêÎîîÌÑ∞ Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú
 */
export const postsControllerUploadContentImage = (signal?: AbortSignal) => {
  return apiInstance<PostsControllerUploadContentImage201>({
    url: `/posts/upload-image`,
    method: 'POST',
    signal,
  });
};

export const getPostsControllerUploadContentImageMutationOptions = <
  TError = ApiErrorResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsControllerUploadContentImage>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postsControllerUploadContentImage>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['postsControllerUploadContentImage'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postsControllerUploadContentImage>>,
    void
  > = () => {
    return postsControllerUploadContentImage();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostsControllerUploadContentImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof postsControllerUploadContentImage>>
>;

export type PostsControllerUploadContentImageMutationError =
  ApiErrorResponseDto;

/**
 * @summary ÏóêÎîîÌÑ∞ Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú
 */
export const usePostsControllerUploadContentImage = <
  TError = ApiErrorResponseDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postsControllerUploadContentImage>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postsControllerUploadContentImage>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getPostsControllerUploadContentImageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
