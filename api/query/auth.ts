/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * COCOMOMO API
 * COCOMOMO Î∞±ÏóîÎìú API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { apiInstance } from '../api';

/**
 * GitHub OAuth Ïù∏Ï¶ù ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏Ìï©ÎãàÎã§.
 * @summary GitHub Î°úÍ∑∏Ïù∏ ÏãúÏûë
 */
export const authControllerGithubAuth = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/auth/github`, method: 'GET', signal });
};

export const getAuthControllerGithubAuthQueryKey = () => {
  return [`/auth/github`] as const;
};

export const getAuthControllerGithubAuthQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerGithubAuth>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGithubAuth>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerGithubAuthQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerGithubAuth>>
  > = ({ signal }) => authControllerGithubAuth(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGithubAuth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AuthControllerGithubAuthQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGithubAuth>>
>;
export type AuthControllerGithubAuthQueryError = unknown;

export function useAuthControllerGithubAuth<
  TData = Awaited<ReturnType<typeof authControllerGithubAuth>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGithubAuth>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGithubAuth>>,
          TError,
          Awaited<ReturnType<typeof authControllerGithubAuth>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthControllerGithubAuth<
  TData = Awaited<ReturnType<typeof authControllerGithubAuth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGithubAuth>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGithubAuth>>,
          TError,
          Awaited<ReturnType<typeof authControllerGithubAuth>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthControllerGithubAuth<
  TData = Awaited<ReturnType<typeof authControllerGithubAuth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGithubAuth>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary GitHub Î°úÍ∑∏Ïù∏ ÏãúÏûë
 */

export function useAuthControllerGithubAuth<
  TData = Awaited<ReturnType<typeof authControllerGithubAuth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGithubAuth>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAuthControllerGithubAuthQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * GitHub Ïù∏Ï¶ù ÌõÑ Ï≤òÎ¶¨ÎêòÎäî ÏΩúÎ∞± ÏóîÎìúÌè¨Ïù∏Ìä∏ÏûÖÎãàÎã§.
 * @summary GitHub Î°úÍ∑∏Ïù∏ ÏΩúÎ∞±
 */
export const authControllerGithubAuthCallback = (signal?: AbortSignal) => {
  return apiInstance<void>({
    url: `/auth/github/callback`,
    method: 'GET',
    signal,
  });
};

export const getAuthControllerGithubAuthCallbackQueryKey = () => {
  return [`/auth/github/callback`] as const;
};

export const getAuthControllerGithubAuthCallbackQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerGithubAuthCallback>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGithubAuthCallback>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerGithubAuthCallbackQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerGithubAuthCallback>>
  > = ({ signal }) => authControllerGithubAuthCallback(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGithubAuthCallback>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AuthControllerGithubAuthCallbackQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGithubAuthCallback>>
>;
export type AuthControllerGithubAuthCallbackQueryError = unknown;

export function useAuthControllerGithubAuthCallback<
  TData = Awaited<ReturnType<typeof authControllerGithubAuthCallback>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGithubAuthCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGithubAuthCallback>>,
          TError,
          Awaited<ReturnType<typeof authControllerGithubAuthCallback>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthControllerGithubAuthCallback<
  TData = Awaited<ReturnType<typeof authControllerGithubAuthCallback>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGithubAuthCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGithubAuthCallback>>,
          TError,
          Awaited<ReturnType<typeof authControllerGithubAuthCallback>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthControllerGithubAuthCallback<
  TData = Awaited<ReturnType<typeof authControllerGithubAuthCallback>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGithubAuthCallback>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary GitHub Î°úÍ∑∏Ïù∏ ÏΩúÎ∞±
 */

export function useAuthControllerGithubAuthCallback<
  TData = Awaited<ReturnType<typeof authControllerGithubAuthCallback>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGithubAuthCallback>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAuthControllerGithubAuthCallbackQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
