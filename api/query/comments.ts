/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * COCOMOMO API
 * COCOMOMO Î∞±ÏóîÎìú API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  ApiErrorResponseDto,
  CommentResponseDto,
  CreateCommentDto,
  DeleteCommentResponseDto,
  UpdateCommentDto,
} from '../model';

import { apiInstance } from '../api';

/**
 * ÌäπÏ†ï Í≤åÏãúÍ∏ÄÏóê Îã¨Î¶∞ Î™®Îì† ÎåìÍ∏ÄÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Í≤åÏãúÍ∏ÄÏùò Î™®Îì† ÎåìÍ∏Ä Ï°∞Ìöå
 */
export const commentsControllerFindAllByPostId = (
  postId: number,
  signal?: AbortSignal,
) => {
  return apiInstance<CommentResponseDto[]>({
    url: `/comments/post/${postId}`,
    method: 'GET',
    signal,
  });
};

export const getCommentsControllerFindAllByPostIdQueryKey = (
  postId: number,
) => {
  return [`/comments/post/${postId}`] as const;
};

export const getCommentsControllerFindAllByPostIdQueryOptions = <
  TData = Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>,
  TError = ApiErrorResponseDto,
>(
  postId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCommentsControllerFindAllByPostIdQueryKey(postId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>
  > = ({ signal }) => commentsControllerFindAllByPostId(postId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!postId,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CommentsControllerFindAllByPostIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>
>;
export type CommentsControllerFindAllByPostIdQueryError = ApiErrorResponseDto;

export function useCommentsControllerFindAllByPostId<
  TData = Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>,
  TError = ApiErrorResponseDto,
>(
  postId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>,
          TError,
          Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCommentsControllerFindAllByPostId<
  TData = Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>,
  TError = ApiErrorResponseDto,
>(
  postId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>,
          TError,
          Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCommentsControllerFindAllByPostId<
  TData = Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>,
  TError = ApiErrorResponseDto,
>(
  postId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Í≤åÏãúÍ∏ÄÏùò Î™®Îì† ÎåìÍ∏Ä Ï°∞Ìöå
 */

export function useCommentsControllerFindAllByPostId<
  TData = Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>,
  TError = ApiErrorResponseDto,
>(
  postId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commentsControllerFindAllByPostId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCommentsControllerFindAllByPostIdQueryOptions(
    postId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Í≤åÏãúÍ∏ÄÏóê ÎåìÍ∏ÄÏùÑ ÏûëÏÑ±Ìï©ÎãàÎã§. Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.
 * @summary ÎåìÍ∏Ä ÏûëÏÑ±
 */
export const commentsControllerCreate = (
  postId: number,
  createCommentDto: CreateCommentDto,
  signal?: AbortSignal,
) => {
  return apiInstance<CommentResponseDto>({
    url: `/comments/post/${postId}`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createCommentDto,
    signal,
  });
};

export const getCommentsControllerCreateMutationOptions = <
  TError = ApiErrorResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof commentsControllerCreate>>,
    TError,
    { postId: number; data: CreateCommentDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof commentsControllerCreate>>,
  TError,
  { postId: number; data: CreateCommentDto },
  TContext
> => {
  const mutationKey = ['commentsControllerCreate'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof commentsControllerCreate>>,
    { postId: number; data: CreateCommentDto }
  > = (props) => {
    const { postId, data } = props ?? {};

    return commentsControllerCreate(postId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommentsControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof commentsControllerCreate>>
>;
export type CommentsControllerCreateMutationBody = CreateCommentDto;
export type CommentsControllerCreateMutationError = ApiErrorResponseDto;

/**
 * @summary ÎåìÍ∏Ä ÏûëÏÑ±
 */
export const useCommentsControllerCreate = <
  TError = ApiErrorResponseDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof commentsControllerCreate>>,
      TError,
      { postId: number; data: CreateCommentDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof commentsControllerCreate>>,
  TError,
  { postId: number; data: CreateCommentDto },
  TContext
> => {
  const mutationOptions = getCommentsControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * ÏûêÏã†Ïù¥ ÏûëÏÑ±Ìïú ÎåìÍ∏ÄÏùÑ ÏàòÏ†ïÌï©ÎãàÎã§. Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.
 * @summary ÎåìÍ∏Ä ÏàòÏ†ï
 */
export const commentsControllerUpdate = (
  id: number,
  updateCommentDto: UpdateCommentDto,
) => {
  return apiInstance<CommentResponseDto>({
    url: `/comments/${id}`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateCommentDto,
  });
};

export const getCommentsControllerUpdateMutationOptions = <
  TError = ApiErrorResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof commentsControllerUpdate>>,
    TError,
    { id: number; data: UpdateCommentDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof commentsControllerUpdate>>,
  TError,
  { id: number; data: UpdateCommentDto },
  TContext
> => {
  const mutationKey = ['commentsControllerUpdate'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof commentsControllerUpdate>>,
    { id: number; data: UpdateCommentDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return commentsControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommentsControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof commentsControllerUpdate>>
>;
export type CommentsControllerUpdateMutationBody = UpdateCommentDto;
export type CommentsControllerUpdateMutationError = ApiErrorResponseDto;

/**
 * @summary ÎåìÍ∏Ä ÏàòÏ†ï
 */
export const useCommentsControllerUpdate = <
  TError = ApiErrorResponseDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof commentsControllerUpdate>>,
      TError,
      { id: number; data: UpdateCommentDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof commentsControllerUpdate>>,
  TError,
  { id: number; data: UpdateCommentDto },
  TContext
> => {
  const mutationOptions = getCommentsControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * ÏûêÏã†Ïù¥ ÏûëÏÑ±Ìïú ÎåìÍ∏ÄÏùÑ ÏÇ≠Ï†úÌï©ÎãàÎã§. Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.
 * @summary ÎåìÍ∏Ä ÏÇ≠Ï†ú
 */
export const commentsControllerRemove = (id: number) => {
  return apiInstance<DeleteCommentResponseDto>({
    url: `/comments/${id}`,
    method: 'DELETE',
  });
};

export const getCommentsControllerRemoveMutationOptions = <
  TError = ApiErrorResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof commentsControllerRemove>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof commentsControllerRemove>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['commentsControllerRemove'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof commentsControllerRemove>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return commentsControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommentsControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof commentsControllerRemove>>
>;

export type CommentsControllerRemoveMutationError = ApiErrorResponseDto;

/**
 * @summary ÎåìÍ∏Ä ÏÇ≠Ï†ú
 */
export const useCommentsControllerRemove = <
  TError = ApiErrorResponseDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof commentsControllerRemove>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof commentsControllerRemove>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getCommentsControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
