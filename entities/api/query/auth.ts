/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * COCOMOMO API
 * COCOMOMO Î∞±ÏóîÎìú API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import type {
  ApiErrorDto,
  LoginAuth200AllOf,
  LoginRequestDto,
  RefreshTokenAuth200AllOf,
  RefreshTokenRequestDto,
} from '../model';

import { apiInstance } from '../api';

/**
 * Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ùÏùÑ Ï≤òÎ¶¨ÌïòÍ≥† JWT ÌÜ†ÌÅ∞ÏùÑ Î∞òÌôòÌï©ÎãàÎã§.
 * @summary Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
 */
export const loginAuth = (
  loginRequestDto: LoginRequestDto,
  signal?: AbortSignal,
) => {
  return apiInstance<LoginAuth200AllOf>({
    url: `/auth/login`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: loginRequestDto,
    signal,
  });
};

export const getLoginAuthMutationOptions = <
  TError = ApiErrorDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginAuth>>,
    TError,
    { data: LoginRequestDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof loginAuth>>,
  TError,
  { data: LoginRequestDto },
  TContext
> => {
  const mutationKey = ['loginAuth'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof loginAuth>>,
    { data: LoginRequestDto }
  > = (props) => {
    const { data } = props ?? {};

    return loginAuth(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginAuthMutationResult = NonNullable<
  Awaited<ReturnType<typeof loginAuth>>
>;
export type LoginAuthMutationBody = LoginRequestDto;
export type LoginAuthMutationError = ApiErrorDto;

/**
 * @summary Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
 */
export const useLoginAuth = <TError = ApiErrorDto, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof loginAuth>>,
      TError,
      { data: LoginRequestDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof loginAuth>>,
  TError,
  { data: LoginRequestDto },
  TContext
> => {
  const mutationOptions = getLoginAuthMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Í∞±Ïã†
 */
export const refreshTokenAuth = (
  refreshTokenRequestDto: RefreshTokenRequestDto,
  signal?: AbortSignal,
) => {
  return apiInstance<RefreshTokenAuth200AllOf>({
    url: `/auth/refresh`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: refreshTokenRequestDto,
    signal,
  });
};

export const getRefreshTokenAuthMutationOptions = <
  TError = ApiErrorDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshTokenAuth>>,
    TError,
    { data: RefreshTokenRequestDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof refreshTokenAuth>>,
  TError,
  { data: RefreshTokenRequestDto },
  TContext
> => {
  const mutationKey = ['refreshTokenAuth'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refreshTokenAuth>>,
    { data: RefreshTokenRequestDto }
  > = (props) => {
    const { data } = props ?? {};

    return refreshTokenAuth(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type RefreshTokenAuthMutationResult = NonNullable<
  Awaited<ReturnType<typeof refreshTokenAuth>>
>;
export type RefreshTokenAuthMutationBody = RefreshTokenRequestDto;
export type RefreshTokenAuthMutationError = ApiErrorDto;

/**
 * @summary Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Í∞±Ïã†
 */
export const useRefreshTokenAuth = <TError = ApiErrorDto, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof refreshTokenAuth>>,
      TError,
      { data: RefreshTokenRequestDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof refreshTokenAuth>>,
  TError,
  { data: RefreshTokenRequestDto },
  TContext
> => {
  const mutationOptions = getRefreshTokenAuthMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
