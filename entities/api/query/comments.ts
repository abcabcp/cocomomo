/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * COCOMOMO API
 * COCOMOMO Î∞±ÏóîÎìú API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateCommentDto,
  CreateComments200AllOf,
  DeleteComments200AllOf,
  GetCommentsByPostIdComments200AllOf,
  UpdateCommentDto,
  UpdateComments200AllOf,
} from '../model';

import { apiInstance } from '../api';

/**
 * @summary Í≤åÏãúÍ∏Ä ÎåìÍ∏Ä Î™©Î°ù Ï°∞Ìöå
 */
export const getCommentsByPostIdComments = (
  postId: number,
  signal?: AbortSignal,
) => {
  return apiInstance<GetCommentsByPostIdComments200AllOf>({
    url: `/comments/post/${postId}`,
    method: 'GET',
    signal,
  });
};

export const getGetCommentsByPostIdCommentsQueryKey = (postId: number) => {
  return [`/comments/post/${postId}`] as const;
};

export const getGetCommentsByPostIdCommentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommentsByPostIdComments>>,
  TError = unknown,
>(
  postId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsByPostIdComments>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCommentsByPostIdCommentsQueryKey(postId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCommentsByPostIdComments>>
  > = ({ signal }) => getCommentsByPostIdComments(postId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!postId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommentsByPostIdComments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCommentsByPostIdCommentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommentsByPostIdComments>>
>;
export type GetCommentsByPostIdCommentsQueryError = unknown;

export function useGetCommentsByPostIdComments<
  TData = Awaited<ReturnType<typeof getCommentsByPostIdComments>>,
  TError = unknown,
>(
  postId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsByPostIdComments>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommentsByPostIdComments>>,
          TError,
          Awaited<ReturnType<typeof getCommentsByPostIdComments>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCommentsByPostIdComments<
  TData = Awaited<ReturnType<typeof getCommentsByPostIdComments>>,
  TError = unknown,
>(
  postId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsByPostIdComments>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommentsByPostIdComments>>,
          TError,
          Awaited<ReturnType<typeof getCommentsByPostIdComments>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCommentsByPostIdComments<
  TData = Awaited<ReturnType<typeof getCommentsByPostIdComments>>,
  TError = unknown,
>(
  postId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsByPostIdComments>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Í≤åÏãúÍ∏Ä ÎåìÍ∏Ä Î™©Î°ù Ï°∞Ìöå
 */

export function useGetCommentsByPostIdComments<
  TData = Awaited<ReturnType<typeof getCommentsByPostIdComments>>,
  TError = unknown,
>(
  postId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsByPostIdComments>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCommentsByPostIdCommentsQueryOptions(
    postId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ÎåìÍ∏Ä ÏûëÏÑ±
 */
export const createComments = (
  postId: number,
  createCommentDto: CreateCommentDto,
  signal?: AbortSignal,
) => {
  return apiInstance<CreateComments200AllOf>({
    url: `/comments/post/${postId}`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createCommentDto,
    signal,
  });
};

export const getCreateCommentsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createComments>>,
    TError,
    { postId: number; data: CreateCommentDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createComments>>,
  TError,
  { postId: number; data: CreateCommentDto },
  TContext
> => {
  const mutationKey = ['createComments'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createComments>>,
    { postId: number; data: CreateCommentDto }
  > = (props) => {
    const { postId, data } = props ?? {};

    return createComments(postId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCommentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof createComments>>
>;
export type CreateCommentsMutationBody = CreateCommentDto;
export type CreateCommentsMutationError = unknown;

/**
 * @summary ÎåìÍ∏Ä ÏûëÏÑ±
 */
export const useCreateComments = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createComments>>,
      TError,
      { postId: number; data: CreateCommentDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createComments>>,
  TError,
  { postId: number; data: CreateCommentDto },
  TContext
> => {
  const mutationOptions = getCreateCommentsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary ÎåìÍ∏Ä ÏàòÏ†ï
 */
export const updateComments = (
  id: number,
  updateCommentDto: UpdateCommentDto,
) => {
  return apiInstance<UpdateComments200AllOf>({
    url: `/comments/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateCommentDto,
  });
};

export const getUpdateCommentsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateComments>>,
    TError,
    { id: number; data: UpdateCommentDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateComments>>,
  TError,
  { id: number; data: UpdateCommentDto },
  TContext
> => {
  const mutationKey = ['updateComments'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateComments>>,
    { id: number; data: UpdateCommentDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateComments(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCommentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateComments>>
>;
export type UpdateCommentsMutationBody = UpdateCommentDto;
export type UpdateCommentsMutationError = unknown;

/**
 * @summary ÎåìÍ∏Ä ÏàòÏ†ï
 */
export const useUpdateComments = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateComments>>,
      TError,
      { id: number; data: UpdateCommentDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateComments>>,
  TError,
  { id: number; data: UpdateCommentDto },
  TContext
> => {
  const mutationOptions = getUpdateCommentsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary ÎåìÍ∏Ä ÏÇ≠Ï†ú
 */
export const deleteComments = (id: number) => {
  return apiInstance<DeleteComments200AllOf>({
    url: `/comments/${id}`,
    method: 'DELETE',
  });
};

export const getDeleteCommentsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteComments>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteComments>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteComments'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteComments>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteComments(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCommentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteComments>>
>;

export type DeleteCommentsMutationError = unknown;

/**
 * @summary ÎåìÍ∏Ä ÏÇ≠Ï†ú
 */
export const useDeleteComments = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteComments>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteComments>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteCommentsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
