/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * COCOMOMO API
 * COCOMOMO Î∞±ÏóîÎìú API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import type {
  AddImageUtils200AllOf,
  AddImageUtilsParams,
  AddImagesUtils200AllOf,
  AddImagesUtilsParams,
  ApiErrorDto,
  DeleteImageByUrlUtils200AllOf,
  DeleteImageByUrlUtilsParams,
  UploadImageRequestDto,
  UploadImagesRequestDto,
} from '../model';

import { apiInstance } from '../api';

/**
 * @summary Ïù¥ÎØ∏ÏßÄÎì§ Îì±Î°ù
 */
export const addImagesUtils = (
  uploadImagesRequestDto: UploadImagesRequestDto,
  params?: AddImagesUtilsParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  uploadImagesRequestDto.images.forEach((value) =>
    formData.append(`images`, value),
  );

  return apiInstance<AddImagesUtils200AllOf>({
    url: `/utils/images`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    params,
    signal,
  });
};

export const getAddImagesUtilsMutationOptions = <
  TError = ApiErrorDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addImagesUtils>>,
    TError,
    { data: UploadImagesRequestDto; params?: AddImagesUtilsParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addImagesUtils>>,
  TError,
  { data: UploadImagesRequestDto; params?: AddImagesUtilsParams },
  TContext
> => {
  const mutationKey = ['addImagesUtils'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addImagesUtils>>,
    { data: UploadImagesRequestDto; params?: AddImagesUtilsParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return addImagesUtils(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddImagesUtilsMutationResult = NonNullable<
  Awaited<ReturnType<typeof addImagesUtils>>
>;
export type AddImagesUtilsMutationBody = UploadImagesRequestDto;
export type AddImagesUtilsMutationError = ApiErrorDto;

/**
 * @summary Ïù¥ÎØ∏ÏßÄÎì§ Îì±Î°ù
 */
export const useAddImagesUtils = <TError = ApiErrorDto, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addImagesUtils>>,
      TError,
      { data: UploadImagesRequestDto; params?: AddImagesUtilsParams },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addImagesUtils>>,
  TError,
  { data: UploadImagesRequestDto; params?: AddImagesUtilsParams },
  TContext
> => {
  const mutationOptions = getAddImagesUtilsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Îã®Í±¥ Ïù¥ÎØ∏ÏßÄ Îì±Î°ù
 */
export const addImageUtils = (
  uploadImageRequestDto: UploadImageRequestDto,
  params?: AddImageUtilsParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  formData.append(`image`, uploadImageRequestDto.image);

  return apiInstance<AddImageUtils200AllOf>({
    url: `/utils/image`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    params,
    signal,
  });
};

export const getAddImageUtilsMutationOptions = <
  TError = ApiErrorDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addImageUtils>>,
    TError,
    { data: UploadImageRequestDto; params?: AddImageUtilsParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addImageUtils>>,
  TError,
  { data: UploadImageRequestDto; params?: AddImageUtilsParams },
  TContext
> => {
  const mutationKey = ['addImageUtils'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addImageUtils>>,
    { data: UploadImageRequestDto; params?: AddImageUtilsParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return addImageUtils(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddImageUtilsMutationResult = NonNullable<
  Awaited<ReturnType<typeof addImageUtils>>
>;
export type AddImageUtilsMutationBody = UploadImageRequestDto;
export type AddImageUtilsMutationError = ApiErrorDto;

/**
 * @summary Îã®Í±¥ Ïù¥ÎØ∏ÏßÄ Îì±Î°ù
 */
export const useAddImageUtils = <TError = ApiErrorDto, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addImageUtils>>,
      TError,
      { data: UploadImageRequestDto; params?: AddImageUtilsParams },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addImageUtils>>,
  TError,
  { data: UploadImageRequestDto; params?: AddImageUtilsParams },
  TContext
> => {
  const mutationOptions = getAddImageUtilsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú
 */
export const deleteImageByUrlUtils = (params: DeleteImageByUrlUtilsParams) => {
  return apiInstance<DeleteImageByUrlUtils200AllOf>({
    url: `/utils/image`,
    method: 'DELETE',
    params,
  });
};

export const getDeleteImageByUrlUtilsMutationOptions = <
  TError = ApiErrorDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteImageByUrlUtils>>,
    TError,
    { params: DeleteImageByUrlUtilsParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteImageByUrlUtils>>,
  TError,
  { params: DeleteImageByUrlUtilsParams },
  TContext
> => {
  const mutationKey = ['deleteImageByUrlUtils'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteImageByUrlUtils>>,
    { params: DeleteImageByUrlUtilsParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteImageByUrlUtils(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteImageByUrlUtilsMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteImageByUrlUtils>>
>;

export type DeleteImageByUrlUtilsMutationError = ApiErrorDto;

/**
 * @summary Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú
 */
export const useDeleteImageByUrlUtils = <
  TError = ApiErrorDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteImageByUrlUtils>>,
      TError,
      { params: DeleteImageByUrlUtilsParams },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteImageByUrlUtils>>,
  TError,
  { params: DeleteImageByUrlUtilsParams },
  TContext
> => {
  const mutationOptions = getDeleteImageByUrlUtilsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
