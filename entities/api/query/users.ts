/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * COCOMOMO API
 * COCOMOMO Î∞±ÏóîÎìú API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { ApiErrorDto, GetCurrentUserUsers200AllOf } from '../model';

import { apiInstance } from '../api';

/**
 * Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ÏúºÎ°ú Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©ÏûêÏùò GitHub Ï†ïÎ≥¥Î•º Î∞òÌôòÌï©ÎãàÎã§.
 * @summary ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê GitHub Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export const getProfileUsers = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/users/profile`, method: 'GET', signal });
};

export const getGetProfileUsersQueryKey = () => {
  return [`/users/profile`] as const;
};

export const getGetProfileUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getProfileUsers>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getProfileUsers>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProfileUsersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfileUsers>>> = ({
    signal,
  }) => getProfileUsers(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProfileUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProfileUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProfileUsers>>
>;
export type GetProfileUsersQueryError = unknown;

export function useGetProfileUsers<
  TData = Awaited<ReturnType<typeof getProfileUsers>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProfileUsers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfileUsers>>,
          TError,
          Awaited<ReturnType<typeof getProfileUsers>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProfileUsers<
  TData = Awaited<ReturnType<typeof getProfileUsers>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProfileUsers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfileUsers>>,
          TError,
          Awaited<ReturnType<typeof getProfileUsers>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProfileUsers<
  TData = Awaited<ReturnType<typeof getProfileUsers>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProfileUsers>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê GitHub Ï†ïÎ≥¥ Ï°∞Ìöå
 */

export function useGetProfileUsers<
  TData = Awaited<ReturnType<typeof getProfileUsers>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProfileUsers>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetProfileUsersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCurrentUserUsers = (signal?: AbortSignal) => {
  return apiInstance<GetCurrentUserUsers200AllOf>({
    url: `/users/me`,
    method: 'GET',
    signal,
  });
};

export const getGetCurrentUserUsersQueryKey = () => {
  return [`/users/me`] as const;
};

export const getGetCurrentUserUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentUserUsers>>,
  TError = ApiErrorDto,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCurrentUserUsers>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCurrentUserUsersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCurrentUserUsers>>
  > = ({ signal }) => getCurrentUserUsers(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentUserUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentUserUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentUserUsers>>
>;
export type GetCurrentUserUsersQueryError = ApiErrorDto;

export function useGetCurrentUserUsers<
  TData = Awaited<ReturnType<typeof getCurrentUserUsers>>,
  TError = ApiErrorDto,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentUserUsers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUserUsers>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUserUsers>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentUserUsers<
  TData = Awaited<ReturnType<typeof getCurrentUserUsers>>,
  TError = ApiErrorDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentUserUsers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUserUsers>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUserUsers>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentUserUsers<
  TData = Awaited<ReturnType<typeof getCurrentUserUsers>>,
  TError = ApiErrorDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentUserUsers>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCurrentUserUsers<
  TData = Awaited<ReturnType<typeof getCurrentUserUsers>>,
  TError = ApiErrorDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentUserUsers>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCurrentUserUsersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
