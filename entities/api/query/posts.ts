/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * COCOMOMO API
 * COCOMOMO Î∞±ÏóîÎìú API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  ApiErrorDto,
  CreatePostDto,
  CreatePosts200AllOf,
  FindAllPosts200AllOf,
  FindAllPostsParams,
  FindOnePosts200AllOf,
  RemovePosts200AllOf,
  UpdatePostDto,
  UpdatePosts200AllOf,
} from '../model';

import { apiInstance } from '../api';

/**
 * @summary Í≤åÏãúÍ∏Ä Î™©Î°ù Ï°∞Ìöå
 */
export const findAllPosts = (
  params?: FindAllPostsParams,
  signal?: AbortSignal,
) => {
  return apiInstance<FindAllPosts200AllOf>({
    url: `/posts`,
    method: 'GET',
    params,
    signal,
  });
};

export const getFindAllPostsQueryKey = (params?: FindAllPostsParams) => {
  return [`/posts`, ...(params ? [params] : [])] as const;
};

export const getFindAllPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllPosts>>,
  TError = unknown,
>(
  params?: FindAllPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findAllPosts>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFindAllPostsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllPosts>>> = ({
    signal,
  }) => findAllPosts(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllPosts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FindAllPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof findAllPosts>>
>;
export type FindAllPostsQueryError = unknown;

export function useFindAllPosts<
  TData = Awaited<ReturnType<typeof findAllPosts>>,
  TError = unknown,
>(
  params: undefined | FindAllPostsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findAllPosts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllPosts>>,
          TError,
          Awaited<ReturnType<typeof findAllPosts>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindAllPosts<
  TData = Awaited<ReturnType<typeof findAllPosts>>,
  TError = unknown,
>(
  params?: FindAllPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findAllPosts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllPosts>>,
          TError,
          Awaited<ReturnType<typeof findAllPosts>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindAllPosts<
  TData = Awaited<ReturnType<typeof findAllPosts>>,
  TError = unknown,
>(
  params?: FindAllPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findAllPosts>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Í≤åÏãúÍ∏Ä Î™©Î°ù Ï°∞Ìöå
 */

export function useFindAllPosts<
  TData = Awaited<ReturnType<typeof findAllPosts>>,
  TError = unknown,
>(
  params?: FindAllPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findAllPosts>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getFindAllPostsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Í≤åÏãúÍ∏Ä ÏÉùÏÑ±
 */
export const createPosts = (
  createPostDto: CreatePostDto,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  formData.append(`title`, createPostDto.title);
  formData.append(`content`, createPostDto.content);
  if (createPostDto.tags !== undefined) {
    formData.append(`tags`, createPostDto.tags);
  }
  if (createPostDto.thumbnail !== undefined) {
    formData.append(`thumbnail`, createPostDto.thumbnail);
  }

  return apiInstance<CreatePosts200AllOf>({
    url: `/posts`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    signal,
  });
};

export const getCreatePostsMutationOptions = <
  TError = ApiErrorDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPosts>>,
    TError,
    { data: CreatePostDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createPosts>>,
  TError,
  { data: CreatePostDto },
  TContext
> => {
  const mutationKey = ['createPosts'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createPosts>>,
    { data: CreatePostDto }
  > = (props) => {
    const { data } = props ?? {};

    return createPosts(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreatePostsMutationResult = NonNullable<
  Awaited<ReturnType<typeof createPosts>>
>;
export type CreatePostsMutationBody = CreatePostDto;
export type CreatePostsMutationError = ApiErrorDto;

/**
 * @summary Í≤åÏãúÍ∏Ä ÏÉùÏÑ±
 */
export const useCreatePosts = <TError = ApiErrorDto, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createPosts>>,
      TError,
      { data: CreatePostDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createPosts>>,
  TError,
  { data: CreatePostDto },
  TContext
> => {
  const mutationOptions = getCreatePostsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const findOnePosts = (id: string, signal?: AbortSignal) => {
  return apiInstance<FindOnePosts200AllOf>({
    url: `/posts/${id}`,
    method: 'GET',
    signal,
  });
};

export const getFindOnePostsQueryKey = (id: string) => {
  return [`/posts/${id}`] as const;
};

export const getFindOnePostsQueryOptions = <
  TData = Awaited<ReturnType<typeof findOnePosts>>,
  TError = ApiErrorDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findOnePosts>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFindOnePostsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findOnePosts>>> = ({
    signal,
  }) => findOnePosts(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof findOnePosts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FindOnePostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof findOnePosts>>
>;
export type FindOnePostsQueryError = ApiErrorDto;

export function useFindOnePosts<
  TData = Awaited<ReturnType<typeof findOnePosts>>,
  TError = ApiErrorDto,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findOnePosts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findOnePosts>>,
          TError,
          Awaited<ReturnType<typeof findOnePosts>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindOnePosts<
  TData = Awaited<ReturnType<typeof findOnePosts>>,
  TError = ApiErrorDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findOnePosts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findOnePosts>>,
          TError,
          Awaited<ReturnType<typeof findOnePosts>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindOnePosts<
  TData = Awaited<ReturnType<typeof findOnePosts>>,
  TError = ApiErrorDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findOnePosts>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useFindOnePosts<
  TData = Awaited<ReturnType<typeof findOnePosts>>,
  TError = ApiErrorDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findOnePosts>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getFindOnePostsQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Í≤åÏãúÍ∏Ä ÏàòÏ†ï
 */
export const updatePosts = (id: string, updatePostDto: UpdatePostDto) => {
  const formData = new FormData();
  if (updatePostDto.title !== undefined) {
    formData.append(`title`, updatePostDto.title);
  }
  if (updatePostDto.content !== undefined) {
    formData.append(`content`, updatePostDto.content);
  }
  if (updatePostDto.tags !== undefined) {
    formData.append(`tags`, updatePostDto.tags);
  }
  if (updatePostDto.thumbnail !== undefined) {
    formData.append(`thumbnail`, updatePostDto.thumbnail);
  }

  return apiInstance<UpdatePosts200AllOf>({
    url: `/posts/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
  });
};

export const getUpdatePostsMutationOptions = <
  TError = ApiErrorDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePosts>>,
    TError,
    { id: string; data: UpdatePostDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updatePosts>>,
  TError,
  { id: string; data: UpdatePostDto },
  TContext
> => {
  const mutationKey = ['updatePosts'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updatePosts>>,
    { id: string; data: UpdatePostDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return updatePosts(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdatePostsMutationResult = NonNullable<
  Awaited<ReturnType<typeof updatePosts>>
>;
export type UpdatePostsMutationBody = UpdatePostDto;
export type UpdatePostsMutationError = ApiErrorDto;

/**
 * @summary Í≤åÏãúÍ∏Ä ÏàòÏ†ï
 */
export const useUpdatePosts = <TError = ApiErrorDto, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updatePosts>>,
      TError,
      { id: string; data: UpdatePostDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updatePosts>>,
  TError,
  { id: string; data: UpdatePostDto },
  TContext
> => {
  const mutationOptions = getUpdatePostsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Í≤åÏãúÍ∏Ä ÏÇ≠Ï†ú
 */
export const removePosts = (id: string) => {
  return apiInstance<RemovePosts200AllOf>({
    url: `/posts/${id}`,
    method: 'DELETE',
  });
};

export const getRemovePostsMutationOptions = <
  TError = ApiErrorDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removePosts>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removePosts>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['removePosts'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removePosts>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return removePosts(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemovePostsMutationResult = NonNullable<
  Awaited<ReturnType<typeof removePosts>>
>;

export type RemovePostsMutationError = ApiErrorDto;

/**
 * @summary Í≤åÏãúÍ∏Ä ÏÇ≠Ï†ú
 */
export const useRemovePosts = <TError = ApiErrorDto, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof removePosts>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof removePosts>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getRemovePostsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
